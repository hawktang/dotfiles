export PATH=~/bin:~/.local/bin:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/opt/homebrew/bin/:/opt/homebrew/sbin/:$PATH
# Download Znap, if it's not there yet.
[[ -f ~/zsh-nap/zsh-snap/znap.zsh ]] ||
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git ~/zsh-nap/zsh-snap

source ~/zsh-nap/zsh-snap/znap.zsh  # Start Znap

{{ if eq .chezmoi.os "darwin" }}
export EDITOR="mcedit"
znap eval iterm2 'curl -fsSL https://iterm2.com/shell_integration/zsh'
{{ else if eq .chezmoi.os "linux" }}
export EDITOR="mcedit"
{{ else }}
# other operating system
{{ end }}

##
# Does your shell feels slow to start? `znap prompt` reduces the time between
# opening your terminal and seeing your prompt to just 15 - 40 ms!
#
# znap prompt agnoster/agnoster-zsh-theme

# `znap prompt` also supports Oh-My-Zsh themes. Just make sure you load the
# required libs first:
# znap source ohmyzsh/ohmyzsh lib/{git,theme-and-appearance}
# znap prompt ohmyzsh/ohmyzsh robbyrussell

# Using your own custom prompt? After initializing the prompt, just call
# `znap prompt` without arguments to get it to show:
# PS1=$'%(?,%F{g},%F{r})%#%f '
# znap prompt

# The same goes for any other kind of custom prompt:
# znap eval starship 'starship init zsh --print-full-init'
eval "$(starship init zsh)"
znap prompt

# NOTE that `znap prompt` does not work with Powerlevel10k.
# With that theme, you should use its "instant prompt" feature instead.


##
# Load your plugins with `znap source`.
#

# znap source marlonrichert/zsh-edit

# ...or to load only those parts of Oh-My-Zsh or Prezto that you really need:
# znap source sorin-ionescu/prezto modules/{environment,history}
# znap source ohmyzsh/ohmyzsh 'lib/(*~(git|theme-and-appearance).zsh)' plugins/git

znap eval trapd00r/LS_COLORS "$( whence -a dircolors gdircolors ) -b LS_COLORS"

# The cache gets regenerated, too, when the eval command has changed. For
# example, here we include a variable. So, the cache gets invalidated whenever
# this variable has changed.
znap source marlonrichert/zcolors
znap eval   marlonrichert/zcolors "zcolors ${(q)LS_COLORS}"

znap install ohmyzsh/ohmyzsh

ZSH="$HOME/zsh-nap/ohmyzsh/"

plugins=(
    last-working-dir
    httpie
    magic-enter
    colored-man-pages
    aliases
    aws
    fzf
    sudo
    fd
    gh
    git
    kate
    extract
    docker
    thefuck
    brew
)
source $ZSH/oh-my-zsh.sh




# znap source ohmyzsh/ohmyzsh plugins/magic-enter
# znap source ohmyzsh/ohmyzsh plugins/colored-man-pages
# znap source ohmyzsh/ohmyzsh plugins/aliases
# znap source ohmyzsh/ohmyzsh plugins/aws
# znap source ohmyzsh/ohmyzsh plugins/fzf
# znap source ohmyzsh/ohmyzsh plugins/sudo
# znap source ohmyzsh/ohmyzsh plugins/fd
# znap source ohmyzsh/ohmyzsh plugins/gh
# znap source ohmyzsh/ohmyzsh plugins/git
# znap source ohmyzsh/ohmyzsh plugins/last-working-dir
# znap source ohmyzsh/ohmyzsh plugins/httpie
# znap source ohmyzsh/ohmyzsh plugins/kate
# znap source ohmyzsh/ohmyzsh plugins/extract
# znap source ohmyzsh/ohmyzsh plugins/docker
# znap source ohmyzsh/ohmyzsh plugins/thefuck

# znap source MichaelAquilina/zsh-autoswitch-virtualenv
znap source wfxr/forgit

znap source NullSense/fuzzy-sys

znap function _pyenv pyenv              'eval "$( pyenv init - --no-rehash )"'
compctl -K    _pyenv pyenv

znap function _pip_completion pip       'eval "$( pip completion --zsh )"'
compctl -K    _pip_completion pip

znap function _python_argcomplete pipx  'eval "$( register-python-argcomplete pipx  )"'
complete -o nospace -o default -o bashdefault \
           -F _python_argcomplete pipx

znap function _pipenv pipenv            'eval "$( pipenv --completion )"'
compdef       _pipenv pipenv


setopt auto_cd
HISTSIZE=10000
HISTFILE=~/.zsh_history
SAVEHIST=10000
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt incappendhistory
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups
unsetopt HIST_REDUCE_BLANKS

export FZF_COMPLETION_TRIGGER='`'


export FZF_DEFAULT_COMMAND='fd --type f'

# # Options to fzf command
export FZF_COMPLETION_OPTS='--border --info=inline'

export FZF_CTRL_T_OPTS="
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"

export FZF_CTRL_R_OPTS="
  --preview 'echo {}' --preview-window up:3:hidden:wrap
  --bind 'ctrl-/:toggle-preview'
  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
  --color header:italic
  --header 'Press CTRL-Y to copy command into clipboard'"

export FZF_ALT_C_OPTS="--preview 'tree -C {}'"



# # Use fd (https://github.com/sharkdp/fd) instead of the default find
# # command for listing path candidates.
# # - The first argument to the function ($1) is the base path to start traversal
# # - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --max-depth 2 --hidden --follow --exclude ".git" . "$1"
}

# # Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --max-depth 2 --type d --hidden --follow --exclude ".git" . "$1"
}

# # Advanced customization of fzf options via _fzf_comprun function
# # - The first argument to the function is the name of the command.
# # - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'tree -C {} | head -200'   "$@" ;;
    export|unset) fzf --preview "eval 'echo \$'{}"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview 'bat -n --color=always {}' "$@" ;;
  esac
}

znap source agkozak/zsh-z


{{ if eq .chezmoi.os "darwin" }}
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
znap source zsh-users/zsh-completions
{{ else if eq .chezmoi.os "linux" }}
zstyle ':autocomplete:*' fzf-completion yes
zstyle ':autocomplete:recent-dirs' backend zsh-z
zstyle ':autocomplete:*' widget-style menu-select
# znap source marlonrichert/zsh-autocomplete

zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'
zstyle ':fzf-tab:*' continuous-trigger space

zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'

zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' \
    fzf-preview 'echo ${(P)word}'

zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview \
    'git diff $word | delta'
zstyle ':fzf-tab:complete:git-log:*' fzf-preview \
    'git log --color=always $word'
zstyle ':fzf-tab:complete:git-help:*' fzf-preview \
    'git help $word | bat -plman --color=always'
zstyle ':fzf-tab:complete:git-show:*' fzf-preview \
    'case "$group" in
    "commit tag") git show --color=always $word ;;
    *) git show --color=always $word | delta ;;
    esac'
zstyle ':fzf-tab:complete:git-checkout:*' fzf-preview \
    'case "$group" in
    "modified file") git diff $word | delta ;;
    "recent commit object name") git show --color=always $word | delta ;;
    *) git log --color=always $word ;;
    esac'

zstyle ':fzf-tab:complete:brew-(install|uninstall|search|info):*-argument-rest' fzf-preview 'brew info $word'

zstyle ':fzf-tab:complete:tldr:argument-1' fzf-preview 'tldr --color always $word'

zstyle ':fzf-tab:complete:-command-:*' fzf-preview \
  Â¦ '(out=$(tldr --color always "$word") 2>/dev/null && echo $out) || (out=$(MANWIDTH=$FZF_PREVIEW_COLUMNS man "$word") 2>/dev/null && echo $out) || (out=$(which "$word") && echo $out) || echo "${(P)word}"'

zstyle ':fzf-tab:complete:*:*' fzf-preview 'less ${(Q)realpath}'
export LESSOPEN='|~/.lessfilter %s'

zstyle ':fzf-tab:complete:*:options' fzf-preview 
zstyle ':fzf-tab:complete:*:argument-1' fzf-preview

znap source Aloxaf/fzf-tab

{{ else }}
# other operating system
{{ end }}

# ZSH_AUTOSUGGEST_STRATEGY=( history )
znap source zsh-users/zsh-autosuggestions

# ZSH_HIGHLIGHT_HIGHLIGHTERS=( main brackets )
znap source zsh-users/zsh-syntax-highlighting

bindkey '\e[A' fzf-history-widget
bindkey '\eOA' fzf-history-widget

alias l='exa  --icons --classify  --long --header --group --color auto --color-scale --git --sort=modified --group-directories-first --git-ignore'
alias la='exa  --icons --classify  --long --header --group --color auto --color-scale --git --sort=modified --group-directories-first --all'
alias ll='exa  --icons --classify  --long --header --group --color auto --color-scale --git --sort=modified --group-directories-first --tree  --level=2 --all'
alias ls='exa  --icons --classify  --long --header --group --color auto --color-scale --git --git-ignore --git-ignore'
alias fd='fd -HI'

# alias nali='~/go/bin/nali'
# alias mc='mc -x'
# alias mcedit='mcedit -x'

{{ if eq .chezmoi.os "darwin" }}
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/mambaforge/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/mambaforge/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/mambaforge/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/mambaforge/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

{{ else if eq .chezmoi.os "linux" }}

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/conda/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/conda/etc/profile.d/conda.sh" ]; then
        . "/opt/conda/etc/profile.d/conda.sh"
    else
        export PATH="/opt/conda/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

{{ else }}
# other operating system
{{ end }}

if [ -f ~/.credentials.zsh ]; then
    source ~/.credentials.zsh
    znap source not-poma/lazyshell
    bindkey '^g' __lazyshell_complete
fi


